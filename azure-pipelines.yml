# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |

      python -m pip install --upgrade pip
      pip install -r requirements/testing/travis_all.txt -r requirements/testing/travis36.txt
      # GUI toolkits are pip-installable only for some versions of Python so
      # don't fail if we can't install them.  Make it easier to check whether the
      # install was successful by trying to import the toolkit (sometimes, the
      # install appears to be successful but shared libraries cannot be loaded at
      # runtime, so an actual import is a better check).
      python -mpip install --upgrade cairocffi>=0.8 pgi>=0.0.11.2 &&
        python -c 'import pgi as gi; gi.require_version("Gtk", "3.0"); from pgi.repository import Gtk' &&
        echo 'pgi is available' ||
        echo 'pgi is not available'
      python -mpip install --upgrade pyqt5 &&
        python -c 'import PyQt5.QtCore' &&
        echo 'PyQt5 is available' ||
        echo 'PyQt5 is not available'
      python -mpip install --upgrade \
        -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-14.04 \
        wxPython &&
        python -c 'import wx' &&
        echo 'wxPython is available' ||
        echo 'wxPython is not available'

    displayName: 'Install dependencies'
  - script: |

      export DISPLAY=:99.0
      sh -e /etc/init.d/xvfb start
    displayName: 'start x server'

  - script: pip install -ve .
    displayName: "Install self"

  - script: |

      pip install pytest
      pytest --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
